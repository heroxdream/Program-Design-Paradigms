#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 24 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 6205 0 49 3 12 #"#lang racket"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"require"
0 0 49 3 1 #" "
0 0 49 3 12 #"\"extras.rkt\""
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"require"
0 0 49 3 1 #" "
0 0 49 3 8 #"rackunit"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"require"
0 0 49 3 1 #" "
0 0 49 3 9 #"lang/posn"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"require"
0 0 49 3 1 #" "
0 0 49 3 11 #"2htdp/image"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"require"
0 0 49 3 1 #" "
0 0 49 3 14 #"2htdp/universe"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 13 #"TIME-ON-TASK "
0 0 49 3 3 #"15)"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"provide"
0 0 49 3 1 #" "
0 0 49 3 13 #"INITIAL-WORLD"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"provide"
0 0 49 3 1 #" "
0 0 49 3 12 #"handle-mouse"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"provide"
0 0 49 3 1 #" "
0 0 49 3 8 #"Shape<%>"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"provide"
0 0 49 3 1 #" "
0 0 49 3 16 #"get-world-shapes"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"provide"
0 0 49 3 1 #" "
0 0 49 3 16 #"create-rectangle"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"provide"
0 0 49 3 1 #" "
0 0 49 3 13 #"create-circle"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"; constants"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 3 #"MT "
0 0 49 3 1 #"("
0 0 49 3 11 #"empty-scene"
0 0 49 3 1 #" "
0 0 49 3 4 #"600 "
0 0 49 3 5 #"400))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 13 #"BLACK-SQUARE "
0 0 49 3 1 #"("
0 0 49 3 9 #"rectangle"
0 0 49 3 1 #" "
0 0 49 3 3 #"20 "
0 0 49 3 3 #"20 "
0 0 49 3 8 #"\"solid\" "
0 0 49 3 9 #"\"black\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 13 #"WHITE-SQUARE "
0 0 49 3 1 #"("
0 0 49 3 9 #"rectangle"
0 0 49 3 1 #" "
0 0 49 3 3 #"20 "
0 0 49 3 3 #"20 "
0 0 49 3 10 #"\"outline\" "
0 0 49 3 9 #"\"black\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 8 #"WHITE-P "
0 0 49 3 1 #"("
0 0 49 3 4 #"text"
0 0 49 3 1 #" "
0 0 49 3 4 #"\"p\" "
0 0 49 3 3 #"16 "
0 0 49 3 9 #"\"white\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 8 #"BLACK-P "
0 0 49 3 1 #"("
0 0 49 3 4 #"text"
0 0 49 3 1 #" "
0 0 49 3 4 #"\"p\" "
0 0 49 3 3 #"16 "
0 0 49 3 9 #"\"black\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 8 #"WHITE-R "
0 0 49 3 1 #"("
0 0 49 3 4 #"text"
0 0 49 3 1 #" "
0 0 49 3 4 #"\"r\" "
0 0 49 3 3 #"16 "
0 0 49 3 9 #"\"white\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 8 #"BLACK-R "
0 0 49 3 1 #"("
0 0 49 3 4 #"text"
0 0 49 3 1 #" "
0 0 49 3 4 #"\"r\" "
0 0 49 3 3 #"16 "
0 0 49 3 9 #"\"black\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 8 #"WHITE-C "
0 0 49 3 1 #"("
0 0 49 3 4 #"text"
0 0 49 3 1 #" "
0 0 49 3 4 #"\"c\" "
0 0 49 3 3 #"16 "
0 0 49 3 9 #"\"white\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 8 #"BLACK-C "
0 0 49 3 1 #"("
0 0 49 3 4 #"text"
0 0 49 3 1 #" "
0 0 49 3 4 #"\"c\" "
0 0 49 3 3 #"16 "
0 0 49 3 9 #"\"black\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 5 #"POSN "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 2 #"0 "
0 0 49 3 3 #"0))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 3 #"VS "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 2 #"0 "
0 0 49 3 3 #"0))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 13 #"TOOLBAR-LEFT "
0 0 49 3 2 #"0)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 14 #"TOOLBAR-RIGHT "
0 0 49 3 3 #"20)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 12 #"TOOLBAR-TOP "
0 0 49 3 2 #"0)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 15 #"TOOLBAR-BOTTOM "
0 0 49 3 3 #"60)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 12 #"BETWEEN/P/R "
0 0 49 3 3 #"20)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 12 #"BETWEEN/R/C "
0 0 49 3 3 #"40)"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 71
(
 #"; A BoundingBox is a (list Coordinate Coordinate Coordinate Coordina"
 #"te)"
) 0 0 49 29 1 #"\n"
0 0 49 3 47 #"; INTERPRETATION: (list left top right bottom)."
0 0 49 29 1 #"\n"
0 0 49 3 76
(
 #"; A BoundingBox represents a box whose left x-coordinate is at \"lef"
 #"t\", whose"
) 0 0 49 29 1 #"\n"
0 0 49 3 76
(
 #"; top y-coordinate is at \"top\", whose right x-coordinate is at \"r"
 #"ight\", and "
) 0 0 49 29 1 #"\n"
0 0 49 3 43 #"; whose bottom y-coordinate is at \"bottom\"."
0 0 49 29 1 #"\n"
0 0 49 3 11 #"; Template:"
0 0 49 29 1 #"\n"
0 0 49 3 37 #"; boundingBox-fn : BoundingBox -> ???"
0 0 49 29 1 #"\n"
0 0 49 3 49 #"; Strategy: data decomposition on bb: BoundingBox"
0 0 49 29 1 #"\n"
0 0 49 3 28 #";(define (boundingBox-fn bb)"
0 0 49 29 1 #"\n"
0 0 49 3 60
#";  (...(first bb)...(second bb)...(third bb)...(fourth bb)))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 25 #"; A ShapeState is one of:"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"; - created"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"; - creating"
0 0 49 29 1 #"\n"
0 0 49 3 10 #"; - moving"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"; - resizing"
0 0 49 29 1 #"\n"
0 0 49 3 43 #"; Represents the current state of the shape"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 8 #"created "
0 0 49 3 10 #"\"created\")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 9 #"creating "
0 0 49 3 11 #"\"creating\")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 7 #"moving "
0 0 49 3 9 #"\"moving\")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 9 #"resizing "
0 0 49 3 11 #"\"resizing\")"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"; Template: "
0 0 49 29 1 #"\n"
0 0 49 3 34 #"; shapeState-fn: ShapeState -> ???"
0 0 49 29 1 #"\n"
0 0 49 3 48 #"; Strategy: data decomposition on ss: ShapeState"
0 0 49 29 1 #"\n"
0 0 49 3 27 #";(define (shapeState-fn ss)"
0 0 49 29 1 #"\n"
0 0 49 3 8 #";  (cond"
0 0 49 29 1 #"\n"
0 0 49 3 24 #";    [(created? ss) ...]"
0 0 49 29 1 #"\n"
0 0 49 3 25 #";    [(creating? ss) ...]"
0 0 49 29 1 #"\n"
0 0 49 3 23 #";    [(moving? ss) ...]"
0 0 49 29 1 #"\n"
0 0 49 3 27 #";    [(resizing? ss) ...]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 33 #"; created?: ShapeState -> Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 34 #"; creating?: ShapeState -> Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"; moving?: ShapeState -> Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 34 #"; resizing?: ShapeState -> Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 72
(
 #"; Returns true if the current state is created/creating/moving/resiz"
 #"ing."
) 0 0 49 29 1 #"\n"
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 14 #"begin-for-test"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 10 #"check-true"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 9 #"created? "
0 0 49 3 9 #"created))"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 10 #"check-true"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"creating? "
0 0 49 3 10 #"creating))"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 10 #"check-true"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 8 #"moving? "
0 0 49 3 8 #"moving))"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 10 #"check-true"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"resizing? "
0 0 49 3 11 #"resizing)))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 9 #"created? "
0 0 49 3 5 #"state"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 6 #"state "
0 0 49 3 9 #"created))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"creating? "
0 0 49 3 5 #"state"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 6 #"state "
0 0 49 3 10 #"creating))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 8 #"moving? "
0 0 49 3 5 #"state"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 6 #"state "
0 0 49 3 8 #"moving))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"resizing? "
0 0 49 3 5 #"state"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 6 #"state "
0 0 49 3 10 #"resizing))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 24 #"; A DrawState is one of:"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"; - pointer"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"; - rectangle"
0 0 49 29 1 #"\n"
0 0 49 3 10 #"; - circle"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 8 #"pointer "
0 0 49 3 10 #"\"pointer\")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 4 #"rec "
0 0 49 3 12 #"\"rectangle\")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 4 #"cir "
0 0 49 3 9 #"\"circle\")"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"; Template:"
0 0 49 29 1 #"\n"
0 0 49 3 21 #"; drawState-fn -> ???"
0 0 49 29 1 #"\n"
0 0 49 3 47 #"; Strategy: data decomposition on ds: DrawState"
0 0 49 29 1 #"\n"
0 0 49 3 26 #";(define (drawState-fn ds)"
0 0 49 29 1 #"\n"
0 0 49 3 8 #";  (cond"
0 0 49 29 1 #"\n"
0 0 49 3 24 #";    [(pointer? ds) ...]"
0 0 49 29 1 #"\n"
0 0 49 3 26 #";    [(rectangle? ds) ...]"
0 0 49 29 1 #"\n"
0 0 49 3 25 #";    [(circle? ds) ...]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 30 #"; pointer? : String -> Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"; Returns true if string matches"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 14 #"begin-for-test"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 12 #"check-equal?"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 9 #"pointer? "
0 0 49 3 11 #"\"pointer\") "
0 0 49 3 5 #"#true"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 44 #"\"Test failed. Function should return true\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 9 #"pointer? "
0 0 49 3 5 #"state"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 8 #"pointer "
0 0 49 3 7 #"state))"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"; rectangle? : String -> Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"; Returns true if string matches"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 14 #"begin-for-test"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 12 #"check-equal?"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"rectangle? "
0 0 49 3 13 #"\"rectangle\") "
0 0 49 3 5 #"#true"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 44 #"\"Test failed. Function should return true\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"rectangle? "
0 0 49 3 5 #"state"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 4 #"rec "
0 0 49 3 7 #"state))"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"; circle? : String -> Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"; Returns true if string matches"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 14 #"begin-for-test"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 12 #"check-equal?"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 8 #"circle? "
0 0 49 3 10 #"\"circle\") "
0 0 49 3 5 #"#true"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 44 #"\"Test failed. Function should return true\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 8 #"circle? "
0 0 49 3 5 #"state"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 4 #"cir "
0 0 49 3 7 #"state))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 13 #"TestCircle<%>"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 9 #"interface"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 2 #"; "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 17 #"testing:get-state"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 14 #"testing:get-vs"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 18 #"testing:get-center"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 18 #"testing:get-radius"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 16 #"TestRectangle<%>"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 9 #"interface"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 18 #"testing:get-stable"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 19 #"testing:get-dynamic"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 17 #"testing:get-state"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 14 #"testing:get-vs"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 8 #"Shape<%>"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 9 #"interface"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 29 #"; get-bounds : -> BoundingBox"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 39 #"; Returns the BoundingBox of this shape"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 10 #"get-bounds"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 61
#"; handle-mouse : Coordinate Coordinate MouseEvent -> Shape<%>"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 61
#"; Returns a new shape after handling MouseEvent on this shape"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 12 #"handle-mouse"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 11 #"Drawable<%>"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 9 #"interface"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 15 #"; draw -> Image"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 48 #"; Return a Image which is the image of the shape"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 4 #"draw"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 21 #"; get-centerX -> Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 73
(
 #"; Returns a Posn, which represents the x-coordinate of the shape' ce"
 #"nter."
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 11 #"get-centerX"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 21 #"; get-centerY -> Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 73
(
 #"; Returns a Posn, which represents the y-coordinate of the shape' ce"
 #"nter."
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 11 #"get-centerY"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 63
#"; Rectangle% : A class that satisfies the Drawable<%> interface"
0 0 49 29 1 #"\n"
0 0 49 3 63
#"; A Rectangle is a (new Rectangle [stable Posn] [dynamic Posn] "
0 0 49 29 1 #"\n"
0 0 49 3 72
(
 #";                                         [state ShapeState] [v/s Po"
 #"sn])"
) 0 0 49 29 1 #"\n"
0 0 49 3 73
(
 #"; INTERP : Represents a rectangle, with a stable and dynamic point, "
 #"state"
) 0 0 49 29 1 #"\n"
0 0 49 3 24 #"; and vector start point"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 10 #"Rectangle%"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 6 #"class*"
0 0 49 3 1 #" "
0 0 49 3 8 #"object% "
0 0 49 3 1 #"("
0 0 49 3 9 #"Shape<%> "
0 0 49 3 12 #"Drawable<%> "
0 0 49 3 17 #"TestRectangle<%>)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 10 #"init-field"
0 0 49 3 1 #" "
0 0 49 3 7 #"stable "
0 0 49 3 8 #"dynamic "
0 0 49 3 6 #"state "
0 0 49 3 4 #"v/s)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 69
(
 #"; INTERPRETATION: 'stable' is the posn for stable point of the shape"
 #","
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 73
(
 #"; 'dynamic' is the posn for the dynamic point of the shape which cha"
 #"nges "
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 25 #"; during the drag event, "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 72
(
 #"; 'state' is a ShapeState that represents the current state of the s"
 #"hape"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 49 #"; 'v/s' is a posn for vector for moving the shape"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 33 #"; set-stable : Posn -> Rectangle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 53 #"; Returns a new rectangle by assigning a new position"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 11 #"; Strategy:"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"set-stable"
0 0 49 3 1 #" "
0 0 49 3 1 #"p"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 10 #"set-field!"
0 0 49 3 1 #" "
0 0 49 3 6 #"stable"
0 0 49 3 1 #" "
0 0 49 3 5 #"this "
0 0 49 3 3 #"p))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 33 #"; set-stable : Posn -> Rectangle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 53 #"; Returns a new rectangle by assigning a new position"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 11 #"; Strategy:"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"set-dynamic"
0 0 49 3 1 #" "
0 0 49 3 1 #"p"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 10 #"set-field!"
0 0 49 3 1 #" "
0 0 49 3 7 #"dynamic"
0 0 49 3 1 #" "
0 0 49 3 5 #"this "
0 0 49 3 3 #"p))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; limitation of control boundary"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 17 #"CONTROL-BOUNDARY "
0 0 49 3 3 #"5) "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 74
(
 #"; STABLE and DYNAMIC are only used during moving, representing the i"
 #"nitial"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 74
(
 #"; two start point of the shape, which will be added to the drag vect"
 #"or to "
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 46 #"; calculate the current position of the shape."
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 7 #"STABLE "
0 0 49 3 13 #"stable)      "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 8 #"DYNAMIC "
0 0 49 3 8 #"dynamic)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 34 #"; get-bounds : -> ListOfCoordinate"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 55 #"; Returns a list of coordinate representing a rectangle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 55 #"; Startegy: Data decomposition on stable,dynamic : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"get-bounds"
0 0 49 3 1 #")"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 1 #"("
0 0 49 3 4 #"min "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 9 #"dynamic))"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"                                      "
0 0 49 3 1 #"("
0 0 49 3 4 #"min "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 9 #"dynamic))"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"                                      "
0 0 49 3 1 #"("
0 0 49 3 4 #"max "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 9 #"dynamic))"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"                                      "
0 0 49 3 1 #"("
0 0 49 3 4 #"max "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 11 #"dynamic))))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 63
#"; handle-mouse : Coordinate Coordinate MouseEvent -> Rectangle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 64
#"; Returns the object of the class depending upon the mouse event"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 48 #"; Startegy: Data decomposition on e : MouseEvent"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 12 #"handle-mouse"
0 0 49 3 1 #" "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #" "
0 0 49 3 1 #"e"
0 0 49 3 1 #")"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 4 #"cond"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 2 #"e "
0 0 49 3 15 #"\"button-down\") "
0 0 49 3 1 #"("
0 0 49 3 13 #"gesture-start"
0 0 49 3 1 #" "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy)]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 2 #"e "
0 0 49 3 8 #"\"drag\") "
0 0 49 3 1 #"("
0 0 49 3 9 #"gesturing"
0 0 49 3 1 #" "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy)]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 2 #"e "
0 0 49 3 13 #"\"button-up\") "
0 0 49 3 1 #"("
0 0 49 3 11 #"gesture-end"
0 0 49 3 1 #" "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy)]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 49 3 5 #"this]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 58
#"; gesture-start : Coordinate Coordinate -> MaybeRectangle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 73
(
 #"; Returns a new rectangle or an error by checking the state of the o"
 #"bject"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 51 #"; Strategy: Data decomposition on state: ShapeState"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 14 #"gesture-start "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 2 #"or"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 8 #"moving? "
0 0 49 3 7 #"state) "
0 0 49 3 1 #"("
0 0 49 3 10 #"resizing? "
0 0 49 3 8 #"state)) "
0 0 50 3 1 #"("
0 0 50 3 6 #"error "
0 0 50 3 16 #"\"illegal state\")"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 10 #"creating? "
0 0 49 3 7 #"state) "
0 0 49 29 1 #"\n"
0 0 49 3 9 #"         "
0 0 49 3 1 #"("
0 0 49 3 8 #"build/r "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy) "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy) "
0 0 49 3 6 #"state "
0 0 49 3 4 #"VS)]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 9 #"created? "
0 0 49 3 7 #"state) "
0 0 49 3 1 #"("
0 0 49 3 16 #"init/resize/move"
0 0 49 3 1 #" "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy)]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 56 #"; init/resize/move : Coordinate Coordinate -> Rectangle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 76
(
 #"; Init resize sate or move state a rectangle depending on the curren"
 #"t state "
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 11 #"; of object"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 17 #"init/resize/move "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 5 #"local"
0 0 49 3 1 #"("
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 6 #"stable"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 13 #"control-posn "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy))"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"("
0 0 49 3 2 #"if"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 6 #"posn? "
0 0 49 3 7 #"stable)"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 49 3 1 #"("
0 0 49 3 12 #"init-resize "
0 0 49 3 7 #"stable "
0 0 49 3 3 #"cx "
0 0 49 3 3 #"cy)"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 49 3 1 #"("
0 0 49 3 2 #"if"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 13 #"inside/this? "
0 0 49 3 3 #"cx "
0 0 49 3 3 #"cy)"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 1 #"("
0 0 49 3 10 #"init-move "
0 0 49 3 3 #"cx "
0 0 49 3 3 #"cy)"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 50 3 4 #"this"
0 0 49 3 4 #"))))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 57 #"; init-resize : Posn Coordinate Coordinate -> Rectangle% "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 75
(
 #"; Returns a new initialized resize state rectangle by changing the d"
 #"ynamic "
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 20 #"; point of rectangle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 12 #"init-resize "
0 0 49 3 6 #"stable"
0 0 49 3 1 #" "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 8 #"build/r "
0 0 49 3 7 #"stable "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy) "
0 0 49 3 9 #"resizing "
0 0 49 3 4 #"VS))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 55 #"; init-move : Posn Coordinate Coordinate -> Rectangle% "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 72
(
 #"; Returns a new initialized move state rectangle by changing the vec"
 #"tor "
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 10 #"; position"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"init-move "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 8 #"build/r "
0 0 49 3 7 #"stable "
0 0 49 3 8 #"dynamic "
0 0 49 3 7 #"moving "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 3 #"cx "
0 0 49 3 5 #"cy)))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 49 #"; gesturing : Coordinate Coordinate -> Rectangle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 74
(
 #"; Returns a new rectangle based on the state of the rectangle when d"
 #"raging"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 11 #"; the mouse"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 51 #"; Strategy: Data decomposition on state: ShapeState"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"gesturing "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 2 #"or"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"resizing? "
0 0 49 3 7 #"state) "
0 0 49 3 1 #"("
0 0 49 3 10 #"creating? "
0 0 49 3 7 #"state))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"         "
0 0 49 3 1 #"("
0 0 49 3 8 #"build/r "
0 0 49 3 7 #"stable "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy) "
0 0 49 3 6 #"state "
0 0 49 3 4 #"VS)]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 8 #"moving? "
0 0 49 3 7 #"state) "
0 0 49 3 1 #"("
0 0 49 3 10 #"add/vector"
0 0 49 3 1 #" "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy)]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 50 3 1 #"("
0 0 50 3 9 #"created? "
0 0 50 3 6 #"state)"
0 0 49 3 1 #" "
0 0 50 3 4 #"this"
0 0 49 3 1 #"]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 50 #"; add/vector : Coordinate Coordinate -> Rectangle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 73
(
 #"; Returns the current rectangle with stable and dynamic positions up"
 #"dated"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 55 #"; according to the coordinates passed and initial posn."
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 56 #"; Startegy: Data decomposition on stable, dynamic : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"add/vector "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 5 #"local"
0 0 49 3 1 #"("
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 2 #"vx"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 3 #"cx "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 6 #"v/s)))"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"             "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 2 #"vy"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 3 #"cy "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 6 #"v/s)))"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"             "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"v"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 5 #"send*"
0 0 49 3 1 #" "
0 0 49 3 5 #"this "
0 0 49 29 1 #"\n"
0 0 49 3 25 #"                         "
0 0 49 3 1 #"("
0 0 49 3 10 #"set-stable"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"STABLE) "
0 0 49 3 3 #"vx)"
0 0 49 29 1 #"\n"
0 0 49 3 48 #"                                                "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 8 #"STABLE) "
0 0 49 3 5 #"vy)))"
0 0 49 29 1 #"\n"
0 0 49 3 25 #"                         "
0 0 49 3 1 #"("
0 0 49 3 11 #"set-dynamic"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 9 #"DYNAMIC) "
0 0 49 3 4 #"vx) "
0 0 49 29 1 #"\n"
0 0 49 3 49 #"                                                 "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 9 #"DYNAMIC) "
0 0 49 3 5 #"vy)))"
0 0 49 3 2 #"))"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 6 #"this))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 51 #"; gesture-end : Coordinate Coordinate -> Rectangle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 47 #"; Returns a new rectangle with state as created"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 12 #"gesture-end "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 8 #"build/r "
0 0 49 3 7 #"stable "
0 0 49 3 8 #"dynamic "
0 0 49 3 8 #"created "
0 0 49 3 4 #"VS))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 53 #"; control-posn : Coordinate Coordinate -> Maybe<Posn>"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 75
(
 #"; Returns a the stable posn by the given click point, if the click p"
 #"oint is"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 57 #"; within the control regin of any coners of the rectanle."
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 76
(
 #"; Example: lets assume the four coners of the rectangle are (c1 c2 c"
 #"3 c4) in"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 76
(
 #"; clockwise order. If the click point is within control region of c1"
 #", return"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 34 #"; c3, if c2, returns c4 and so on."
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 13 #"control-posn "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 5 #"local"
0 0 49 3 1 #"("
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 6 #"coner1"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 10 #"dynamic)))"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"             "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 6 #"coner2"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 9 #"dynamic) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 9 #"stable)))"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"             "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 6 #"coners"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 7 #"stable "
0 0 49 3 8 #"dynamic "
0 0 49 3 7 #"coner1 "
0 0 49 3 8 #"coner2))"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"             "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 7 #"hashmap"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-hash "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 7 #"coner1 "
0 0 49 3 8 #"coner2) "
0 0 49 29 1 #"\n"
0 0 49 3 46 #"                                              "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 7 #"coner2 "
0 0 49 3 7 #"coner1)"
0 0 49 29 1 #"\n"
0 0 49 3 46 #"                                              "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 7 #"stable "
0 0 49 3 8 #"dynamic)"
0 0 49 29 1 #"\n"
0 0 49 3 46 #"                                              "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 8 #"dynamic "
0 0 49 3 10 #"stable))))"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"             "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 14 #"control-region"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 15 #"               "
0 0 49 3 1 #"("
0 0 49 3 7 #"filter "
0 0 49 3 1 #"("
0 0 49 3 6 #"lambda"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 1 #"c"
0 0 49 3 1 #")"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 7 #"inside?"
0 0 49 3 1 #" "
0 0 49 3 2 #"c "
0 0 49 3 3 #"cx "
0 0 49 3 3 #"cy "
0 0 49 29 1 #"\n"
0 0 49 3 44 #"                                            "
0 0 49 3 17 #"CONTROL-BOUNDARY "
0 0 49 3 18 #"CONTROL-BOUNDARY))"
0 0 49 29 1 #"\n"
0 0 49 3 23 #"                       "
0 0 49 3 8 #"coners))"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"("
0 0 49 3 2 #"if"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 7 #"empty? "
0 0 49 3 15 #"control-region)"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 49 3 6 #"#false"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 49 3 1 #"("
0 0 49 3 6 #"first "
0 0 49 3 1 #"("
0 0 49 3 9 #"hash-ref "
0 0 49 3 8 #"hashmap "
0 0 49 3 1 #"("
0 0 49 3 6 #"first "
0 0 49 3 20 #"control-region))))))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 65
#"; inside? : Posn Coordinate Coordinate Integer Integer -> Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 65
#"; Returns true if the mouse click (x, y) is inside the rectangle,"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 71
(
 #"; which defined by (center, dis-x, dis-y) where center is the center"
 #" of"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 67
#"; the rectanle, dis-x, dis-y represents the distance to the center."
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 47 #"; Strategy: Data decomposition on center : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 8 #"inside? "
0 0 49 3 6 #"center"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 1 #" "
0 0 49 3 5 #"dis-x"
0 0 49 3 1 #" "
0 0 49 3 5 #"dis-y"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 3 #"and"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 3 #"<= "
0 0 49 3 1 #"("
0 0 49 3 4 #"abs "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 2 #"x "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 10 #"center))) "
0 0 49 3 7 #"dis-x) "
0 0 49 29 1 #"\n"
0 0 49 3 11 #"           "
0 0 49 3 1 #"("
0 0 49 3 3 #"<= "
0 0 49 3 1 #"("
0 0 49 3 4 #"abs "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 2 #"y "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 10 #"center))) "
0 0 49 3 8 #"dis-y)))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 49 #"; inside/this? : Coordinate Coordinate -> Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 57 #"; Returns true if the mouse click is inside the rectangle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 55 #"; Strategy: Data decomposition on stable,dynamic : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 13 #"inside/this? "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 7 #"inside?"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 1 #"("
0 0 49 3 11 #"get-centerX"
0 0 49 3 2 #") "
0 0 49 3 1 #"("
0 0 49 3 11 #"get-centerY"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"               "
0 0 49 3 3 #"cx "
0 0 49 3 3 #"cy "
0 0 49 29 1 #"\n"
0 0 49 3 15 #"               "
0 0 49 3 1 #"("
0 0 49 3 2 #"/ "
0 0 49 3 1 #"("
0 0 49 3 4 #"abs "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 11 #"dynamic))) "
0 0 49 3 2 #"2)"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"               "
0 0 49 3 1 #"("
0 0 49 3 2 #"/ "
0 0 49 3 1 #"("
0 0 49 3 4 #"abs "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 11 #"dynamic))) "
0 0 49 3 4 #"2)))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 17 #"; draw : -> Image"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 35 #"; Returns an image of the rectangle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 55 #"; Strategy: Data decomposition on stable,dynamic : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 4 #"draw"
0 0 49 3 1 #")"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 9 #"creating "
0 0 49 3 7 #"state) "
0 0 49 29 1 #"\n"
0 0 49 3 9 #"         "
0 0 49 3 1 #"("
0 0 49 3 9 #"rectangle"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 4 #"abs "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 11 #"dynamic))) "
0 0 49 29 1 #"\n"
0 0 49 3 20 #"                    "
0 0 49 3 1 #"("
0 0 49 3 4 #"abs "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 10 #"dynamic)))"
0 0 49 29 1 #"\n"
0 0 49 3 20 #"                    "
0 0 49 3 4 #"127 "
0 0 49 3 7 #"\"red\")]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 9 #"rectangle"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 4 #"abs "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 11 #"dynamic))) "
0 0 49 29 1 #"\n"
0 0 49 3 25 #"                         "
0 0 49 3 1 #"("
0 0 49 3 4 #"abs "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 10 #"dynamic)))"
0 0 49 29 1 #"\n"
0 0 49 3 25 #"                         "
0 0 49 3 10 #"\"outline\" "
0 0 49 3 9 #"\"black\")]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 29 #"; get-centerX : -> Coordinate"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 57 #"; Returns the x coordinate of the center of the rectangle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 55 #"; Strategy: Data decomposition on stable,dynamic : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"get-centerX"
0 0 49 3 1 #")"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 2 #"/ "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 10 #"dynamic)) "
0 0 49 3 3 #"2))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 29 #"; get-centerY : -> Coordinate"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 57 #"; Returns the y coordinate of the center of the rectangle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 55 #"; Strategy: Data decomposition on stable,dynamic : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"get-centerY"
0 0 49 3 1 #")"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 2 #"/ "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 8 #"stable) "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 10 #"dynamic)) "
0 0 49 3 3 #"2))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 18 #"testing:get-stable"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 7 #"stable)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 19 #"testing:get-dynamic"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 8 #"dynamic)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 17 #"testing:get-state"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 6 #"state)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 14 #"testing:get-vs"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 4 #"v/s)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 9 #"super-new"
0 0 49 3 1 #")"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 5 #"rec1 "
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 3 #"new"
0 0 49 3 1 #" "
0 0 49 3 11 #"Rectangle% "
0 0 49 3 1 #"["
0 0 49 3 6 #"stable"
0 0 49 3 1 #" "
0 0 49 3 5 #"POSN]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 7 #"dynamic"
0 0 49 3 1 #" "
0 0 49 3 5 #"POSN]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 5 #"state"
0 0 49 3 1 #" "
0 0 49 3 8 #"created]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 3 #"v/s"
0 0 49 3 1 #" "
0 0 49 3 3 #"VS]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 60
#"; Circle% : A class that satisfies the Drawable<%> interface"
0 0 49 29 1 #"\n"
0 0 49 3 61
#"; A circle is a (new Rectangle [center Posn] [radius PosInt] "
0 0 49 29 1 #"\n"
0 0 49 3 67
#";                                    [state StateShape] [v/s Posn])"
0 0 49 29 1 #"\n"
0 0 49 3 59
#"; INTERP : Represents a circle with a center, radius, state"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"; and vector"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 7 #"Circle%"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 6 #"class*"
0 0 49 3 1 #" "
0 0 49 3 8 #"object% "
0 0 49 3 1 #"("
0 0 49 3 9 #"Shape<%> "
0 0 49 3 12 #"Drawable<%> "
0 0 49 3 14 #"TestCircle<%>)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 10 #"init-field"
0 0 49 3 1 #" "
0 0 49 3 7 #"center "
0 0 49 3 7 #"radius "
0 0 49 3 6 #"state "
0 0 49 3 4 #"v/s)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 64
#"; INTERPRETATION: 'center' is the posn for center of the circle,"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 64
#"; 'radius' is the positive integer for the circle which changes "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 25 #"; during the drag event, "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 72
(
 #"; 'state' is a ShapeState that represents the current state of the s"
 #"hape"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 49 #"; 'v/s' is a posn for vector for moving the shape"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 30 #"; set-center : Posn -> Circle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 60
#"; Returns a new circle by assigning a new position to center"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 11 #"; Strategy:"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"set-center"
0 0 49 3 1 #" "
0 0 49 3 1 #"c"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 10 #"set-field!"
0 0 49 3 1 #" "
0 0 49 3 6 #"center"
0 0 49 3 1 #" "
0 0 49 3 5 #"this "
0 0 49 3 3 #"c))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 47 #"; the limitation of the control region boundary"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 17 #"CONTROL-BOUNDARY "
0 0 49 3 2 #"2)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 74
(
 #"; this constant is only used during the circle is moving, which repr"
 #"esents"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 43 #"; the initial center position of the cirle."
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 7 #"CENTER "
0 0 49 3 7 #"center)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 29 #"; get-bounds : -> BoundingBox"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 52 #"; Returns a list of coordinate representing a circle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 47 #"; Startegy: Data decomposition on center : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"get-bounds"
0 0 49 3 1 #")"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"center) "
0 0 49 3 7 #"radius)"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"                                      "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 8 #"center) "
0 0 49 3 7 #"radius)"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"                                      "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"center) "
0 0 49 3 7 #"radius)"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"                                      "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 8 #"center) "
0 0 49 3 9 #"radius)))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 60
#"; handle-mouse : Coordinate Coordinate MouseEvent -> Circle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 64
#"; Returns the object of the class depending upon the mouse event"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 48 #"; Startegy: Data decomposition on e : MouseEvent"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 12 #"handle-mouse"
0 0 49 3 1 #" "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #" "
0 0 49 3 1 #"e"
0 0 49 3 1 #")"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 2 #"e "
0 0 49 3 15 #"\"button-down\") "
0 0 49 3 1 #"("
0 0 49 3 13 #"gesture-start"
0 0 49 3 1 #" "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy)]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 2 #"e "
0 0 49 3 8 #"\"drag\") "
0 0 49 3 1 #"("
0 0 49 3 9 #"gesturing"
0 0 49 3 1 #" "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy)]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 50 3 1 #"("
0 0 50 3 9 #"string=? "
0 0 50 3 2 #"e "
0 0 50 3 12 #"\"button-up\")"
0 0 49 3 1 #" "
0 0 50 3 1 #"("
0 0 50 3 11 #"gesture-end"
0 0 50 3 1 #" "
0 0 50 3 3 #"cx "
0 0 50 3 3 #"cy)"
0 0 49 3 1 #"]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 50 #"; gesture-start : Coordinate Coordinate -> Circle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 70
(
 #"; Returns a new circle or an error by checking the state of the obje"
 #"ct"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 51 #"; Strategy: Data decomposition on state: ShapeState"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 14 #"gesture-start "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 2 #"or"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 8 #"moving? "
0 0 49 3 7 #"state) "
0 0 49 3 1 #"("
0 0 49 3 10 #"resizing? "
0 0 49 3 7 #"state) "
0 0 49 3 1 #"("
0 0 49 3 10 #"creating? "
0 0 49 3 8 #"state)) "
0 0 49 29 1 #"\n"
0 0 49 3 9 #"         "
0 0 49 3 1 #"("
0 0 49 3 8 #"build/c "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy) "
0 0 49 3 2 #"0 "
0 0 49 3 6 #"state "
0 0 49 3 4 #"VS)]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 9 #"created? "
0 0 49 3 7 #"state) "
0 0 49 3 1 #"("
0 0 49 3 16 #"init/resize/move"
0 0 49 3 1 #" "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy)]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 53 #"; init/resize/move : Coordinate Coordinate -> Circle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 73
(
 #"; Init resizing or moving a new circle depending on the current stat"
 #"e of "
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 8 #"; object"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 17 #"init/resize/move "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 5 #"local"
0 0 49 3 1 #"("
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 11 #"controlable"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 13 #"controlable? "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy))"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"("
0 0 49 3 2 #"if"
0 0 49 3 1 #" "
0 0 49 3 11 #"controlable"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 49 3 1 #"("
0 0 49 3 12 #"init-resize "
0 0 49 3 3 #"cx "
0 0 49 3 3 #"cy)"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 49 3 1 #"("
0 0 49 3 2 #"if"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 13 #"inside/this? "
0 0 49 3 3 #"cx "
0 0 49 3 3 #"cy)"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 50 3 1 #"("
0 0 50 3 10 #"init-move "
0 0 50 3 3 #"cx "
0 0 50 3 3 #"cy)"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 8 #"this))))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 49 #"; controlable? : Coordinate Coordinate -> Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 64
#"; Returns true if the mouse click is within the control boundary"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 13 #"controlable? "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 3 #"<= "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 7 #"radius "
0 0 49 3 18 #"CONTROL-BOUNDARY) "
0 0 49 29 1 #"\n"
0 0 49 3 10 #"          "
0 0 49 3 1 #"("
0 0 49 3 11 #"radius-now "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy) "
0 0 49 29 1 #"\n"
0 0 49 3 10 #"          "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 7 #"radius "
0 0 49 3 19 #"CONTROL-BOUNDARY)))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 49 #"; inside/this? : Coordinate Coordinate -> Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 54 #"; Returns true if the mouse click is inside the circle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 13 #"inside/this? "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 2 #"< "
0 0 49 3 1 #"("
0 0 49 3 11 #"radius-now "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy) "
0 0 49 3 8 #"radius))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 49 #"; init-resize : Coordinate Coordinate -> Circle% "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 53 #"; Returns a new resized circle by changing the radius"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 12 #"init-resize "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 8 #"build/c "
0 0 49 3 7 #"center "
0 0 49 3 1 #"("
0 0 49 3 11 #"radius-now "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy) "
0 0 49 3 9 #"resizing "
0 0 49 3 4 #"VS))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 47 #"; init-move : Coordinate Coordinate -> Circle% "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 60
#"; Returns a new moved circle by changing the vector position"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"init-move "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 50 3 1 #"("
0 0 50 3 8 #"build/c "
0 0 50 3 7 #"center "
0 0 50 3 7 #"radius "
0 0 50 3 7 #"moving "
0 0 50 3 1 #"("
0 0 50 3 10 #"make-posn "
0 0 50 3 3 #"cx "
0 0 50 3 4 #"cy))"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 46 #"; gesturing : Coordinate Coordinate -> Circle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 55 #"; Returns a new circle based on the state of the circle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 51 #"; Strategy: Data decomposition on state: ShapeState"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"gesturing "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 2 #"or"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"resizing? "
0 0 49 3 7 #"state) "
0 0 49 3 1 #"("
0 0 49 3 10 #"creating? "
0 0 49 3 8 #"state)) "
0 0 49 29 1 #"\n"
0 0 49 3 9 #"         "
0 0 49 3 1 #"("
0 0 49 3 8 #"build/c "
0 0 49 3 7 #"center "
0 0 49 3 1 #"("
0 0 49 3 11 #"radius-now "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy) "
0 0 49 3 6 #"state "
0 0 49 3 4 #"VS)]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 8 #"moving? "
0 0 49 3 7 #"state) "
0 0 49 3 1 #"("
0 0 49 3 10 #"add/vector"
0 0 49 3 1 #" "
0 0 49 3 3 #"cx "
0 0 49 3 4 #"cy)]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 9 #"created? "
0 0 49 3 7 #"state) "
0 0 49 3 5 #"this]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 48 #"; gesture-end : Coordinate Coordinate -> Circle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 44 #"; Returns a new circle with state as created"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 12 #"gesture-end "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 50 3 1 #"("
0 0 50 3 8 #"build/c "
0 0 50 3 7 #"center "
0 0 50 3 7 #"radius "
0 0 50 3 8 #"created "
0 0 50 3 4 #"v/s)"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 47 #"; add/vector : Coordinate Coordinate -> Circle%"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 66
#"; Returns the current cirlce with center updated according to the "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 45 #"; coordinates passed and initial center posn."
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 56 #"; Startegy: Data decomposition on stable, dynamic : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"add/vector "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 5 #"local"
0 0 49 3 1 #"("
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 2 #"vx"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 3 #"cx "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 6 #"v/s)))"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"             "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 2 #"vy"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 3 #"cy "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 6 #"v/s)))"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"             "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"v"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"set-center"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 10 #"make-posn "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"CENTER) "
0 0 49 3 3 #"vx)"
0 0 49 29 1 #"\n"
0 0 49 3 46 #"                                              "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 8 #"CENTER) "
0 0 49 3 6 #"vy))))"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 6 #"this))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 46 #"; radius-now : Coordinate Coordinate -> PosInt"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 71
(
 #"; Returns the radius of circle by calculating the value from the cen"
 #"ter"
) 0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; and the current mouse position"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 47 #"; Strategy: Data decomposition on center : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"radius-now "
0 0 49 3 2 #"cx"
0 0 49 3 1 #" "
0 0 49 3 2 #"cy"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 5 #"sqrt "
0 0 49 3 1 #"("
0 0 49 3 2 #"+ "
0 0 49 3 1 #"("
0 0 49 3 4 #"sqr "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 3 #"cx "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 10 #"center))) "
0 0 49 3 1 #"("
0 0 49 3 4 #"sqr "
0 0 49 3 1 #"("
0 0 49 3 2 #"- "
0 0 49 3 3 #"cy "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 12 #"center))))))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 17 #"; draw : -> Image"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 32 #"; Returns an image of the circle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 50 #"; Strategy: data decompostion on state: ShapeState"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 4 #"draw"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 1 #"("
0 0 49 3 9 #"string=? "
0 0 49 3 9 #"creating "
0 0 49 3 7 #"state) "
0 0 49 3 1 #"("
0 0 49 3 6 #"circle"
0 0 49 3 1 #" "
0 0 49 3 7 #"radius "
0 0 49 3 4 #"127 "
0 0 49 3 7 #"\"red\")]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 6 #"circle"
0 0 49 3 1 #" "
0 0 49 3 7 #"radius "
0 0 49 3 10 #"\"outline\" "
0 0 49 3 9 #"\"black\")]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 29 #"; get-centerX : -> Coordinate"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 54 #"; Returns the x coordinate of the center of the circle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 47 #"; Strategy: Data decomposition on center : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"get-centerX"
0 0 49 3 1 #")"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-x "
0 0 49 3 8 #"center))"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 29 #"; get-centerY : -> Coordinate"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 54 #"; Returns the y coordinate of the center of the circle"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 47 #"; Strategy: Data decomposition on center : Posn"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"get-centerY"
0 0 49 3 1 #")"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 1 #"("
0 0 49 3 7 #"posn-y "
0 0 49 3 8 #"center))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"   "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 18 #"testing:get-center"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 7 #"center)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 18 #"testing:get-radius"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 7 #"radius)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 17 #"testing:get-state"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 6 #"state)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 13 #"define/public"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 14 #"testing:get-vs"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"      "
0 0 49 3 4 #"v/s)"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 1 #"("
0 0 49 3 9 #"super-new"
0 0 49 3 1 #")"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 5 #"cir1 "
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 3 #"new"
0 0 49 3 1 #" "
0 0 49 3 8 #"Circle% "
0 0 49 3 1 #"["
0 0 49 3 6 #"center"
0 0 49 3 1 #" "
0 0 49 3 5 #"POSN]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 6 #"radius"
0 0 49 3 1 #" "
0 0 49 3 2 #"0]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 5 #"state"
0 0 49 3 1 #" "
0 0 49 3 8 #"created]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 3 #"v/s"
0 0 49 3 1 #" "
0 0 49 3 3 #"VS]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"; A World is a "
0 0 49 29 1 #"\n"
0 0 49 3 48 #"; make-world(ListOf<Shape<%>> DrawState Boolean)"
0 0 49 29 1 #"\n"
0 0 49 3 80
(
 #"; INTERP: shapes represents all the shapes in the current world, sta"
 #"te represent"
) 0 0 49 29 1 #"\n"
0 0 49 3 74
(
 #"; the DrawState of the current world, stop-working represents whethe"
 #"r the "
) 0 0 49 29 1 #"\n"
0 0 49 3 31 #"; current world is stop working"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 13 #"define-struct"
0 0 49 3 1 #" "
0 0 49 3 6 #"world "
0 0 49 3 1 #"("
0 0 49 3 6 #"shapes"
0 0 49 3 1 #" "
0 0 49 3 5 #"state"
0 0 49 3 1 #" "
0 0 49 3 13 #"stop-working?"
0 0 49 3 1 #")"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 23 #"; INITIAL-WORLD : World"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"; An initial world, with no Shape<%>s."
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 14 #"INITIAL-WORLD "
0 0 49 3 1 #"("
0 0 49 3 11 #"make-world "
0 0 49 3 1 #"'"
0 0 49 3 1 #"("
0 0 49 3 2 #") "
0 0 49 3 8 #"pointer "
0 0 49 3 8 #"#false))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 7 #"world1 "
0 0 49 3 1 #"("
0 0 49 3 11 #"make-world "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 6 #"cir1) "
0 0 49 3 8 #"pointer "
0 0 49 3 8 #"#false))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 7 #"world2 "
0 0 49 3 1 #"("
0 0 49 3 11 #"make-world "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 6 #"cir1) "
0 0 49 3 8 #"pointer "
0 0 49 3 7 #"#true))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 7 #"world3 "
0 0 49 3 1 #"("
0 0 49 3 11 #"make-world "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 5 #"cir1 "
0 0 49 3 6 #"rec1) "
0 0 49 3 8 #"pointer "
0 0 49 3 8 #"#false))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 7 #"world4 "
0 0 49 3 1 #"("
0 0 49 3 11 #"make-world "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 5 #"cir1 "
0 0 49 3 6 #"rec1) "
0 0 49 3 4 #"rec "
0 0 49 3 8 #"#false))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 7 #"world5 "
0 0 49 3 1 #"("
0 0 49 3 11 #"make-world "
0 0 49 3 1 #"("
0 0 49 3 5 #"list "
0 0 49 3 5 #"cir1 "
0 0 49 3 6 #"rec1) "
0 0 49 3 4 #"cir "
0 0 49 3 8 #"#false))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 51 #"; build/r : Posn Posn ShapeState Posn -> Rectangle%"
0 0 49 29 1 #"\n"
0 0 49 3 41 #"; Returns a new object of rectangle class"
0 0 49 29 1 #"\n"
0 0 49 3 31 #"; Strategy: Function compostion"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 8 #"build/r "
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #"d"
0 0 49 3 1 #" "
0 0 49 3 5 #"state"
0 0 49 3 1 #" "
0 0 49 3 2 #"vs"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 3 #"new"
0 0 49 3 1 #" "
0 0 49 3 11 #"Rectangle% "
0 0 49 3 1 #"["
0 0 49 3 6 #"stable"
0 0 49 3 1 #" "
0 0 49 3 2 #"s]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 7 #"dynamic"
0 0 49 3 1 #" "
0 0 49 3 2 #"d]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 5 #"state"
0 0 49 3 1 #" "
0 0 49 3 6 #"state]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 3 #"v/s"
0 0 49 3 1 #" "
0 0 49 3 3 #"vs]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 50 #"; build/c : Posn PosInt ShapeState Posn -> Circle%"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"; Returns a new object of circle class"
0 0 49 29 1 #"\n"
0 0 49 3 31 #"; Strategy: Function compostion"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 8 #"build/c "
0 0 49 3 4 #"cntr"
0 0 49 3 1 #" "
0 0 49 3 1 #"r"
0 0 49 3 1 #" "
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 2 #"vs"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 3 #"new"
0 0 49 3 1 #" "
0 0 49 3 8 #"Circle% "
0 0 49 3 1 #"["
0 0 49 3 6 #"center"
0 0 49 3 1 #" "
0 0 49 3 5 #"cntr]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 6 #"radius"
0 0 49 3 1 #" "
0 0 49 3 2 #"r]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 5 #"state"
0 0 49 3 1 #" "
0 0 49 3 2 #"s]"
0 0 49 3 1 #" "
0 0 49 3 1 #"["
0 0 49 3 3 #"v/s"
0 0 49 3 1 #" "
0 0 49 3 3 #"vs]"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 21 #"; run: World -> Image"
0 0 49 29 1 #"\n"
0 0 49 3 60
#"; Computes next world state based on the current world state"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"; Strategy: function composition"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 4 #"run "
0 0 49 3 1 #"w"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 8 #"big-bang"
0 0 49 3 1 #" "
0 0 50 3 1 #"w"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 49 3 1 #"("
0 0 49 3 8 #"on-mouse"
0 0 49 3 1 #" "
0 0 50 3 12 #"handle-mouse"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 49 3 1 #"("
0 0 49 3 7 #"to-draw"
0 0 49 3 1 #" "
0 0 50 3 10 #"draw-world"
0 0 49 3 1 #")"
0 0 49 3 1 #")"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"; draw-world : World -> Image"
0 0 49 29 1 #"\n"
0 0 49 3 58
#"; Returns an image consisting of the draw area and toolbar"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"; Strategy: Function composition"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 14 #"begin-for-test"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 12 #"check-equal?"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"draw-world "
0 0 49 3 1 #"("
0 0 49 3 11 #"make-world "
0 0 49 3 1 #"'"
0 0 49 3 1 #"("
0 0 49 3 2 #") "
0 0 49 3 8 #"pointer "
0 0 49 3 8 #"#false))"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 1 #"("
0 0 49 3 13 #"overlay/align"
0 0 49 3 1 #" "
0 0 49 3 7 #"\"left\" "
0 0 49 3 6 #"\"top\" "
0 0 49 29 1 #"\n"
0 0 49 3 31 #"                               "
0 0 49 3 1 #"("
0 0 49 3 5 #"above"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"WHITE-P "
0 0 49 3 13 #"BLACK-SQUARE)"
0 0 49 29 1 #"\n"
0 0 49 3 39 #"                                       "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"BLACK-R "
0 0 49 3 13 #"WHITE-SQUARE)"
0 0 49 29 1 #"\n"
0 0 49 3 39 #"                                       "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"BLACK-C "
0 0 49 3 14 #"WHITE-SQUARE))"
0 0 49 29 1 #"\n"
0 0 49 3 31 #"                               "
0 0 49 3 3 #"MT)"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 1 #"\""
0 0 49 3 4 #"Test"
0 0 49 3 1 #" "
0 0 49 3 8 #"failed. "
0 0 49 3 8 #"Function"
0 0 49 3 1 #" "
0 0 49 3 6 #"should"
0 0 49 3 1 #" "
0 0 49 3 6 #"return"
0 0 49 3 1 #" "
0 0 49 3 5 #"image"
0 0 49 3 1 #" "
0 0 49 3 2 #"of"
0 0 49 3 1 #" "
0 0 49 3 5 #"empty"
0 0 49 3 1 #" "
0 0 49 3 5 #"scene"
0 0 49 3 1 #" "
0 0 49 3 4 #"with"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 30 #"toolbar and pointer selected\")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 12 #"check-equal?"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"draw-world "
0 0 49 3 1 #"("
0 0 49 3 11 #"make-world "
0 0 49 3 1 #"'"
0 0 49 3 1 #"("
0 0 49 3 2 #") "
0 0 49 3 4 #"rec "
0 0 49 3 8 #"#false))"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 1 #"("
0 0 49 3 13 #"overlay/align"
0 0 49 3 1 #" "
0 0 49 3 7 #"\"left\" "
0 0 49 3 6 #"\"top\" "
0 0 49 29 1 #"\n"
0 0 49 3 31 #"                               "
0 0 49 3 1 #"("
0 0 49 3 5 #"above"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"BLACK-P "
0 0 49 3 13 #"WHITE-SQUARE)"
0 0 49 29 1 #"\n"
0 0 49 3 41 #"                                         "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"WHITE-R "
0 0 49 3 13 #"BLACK-SQUARE)"
0 0 49 29 1 #"\n"
0 0 49 3 41 #"                                         "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"BLACK-C "
0 0 49 3 14 #"WHITE-SQUARE))"
0 0 49 29 1 #"\n"
0 0 49 3 31 #"                               "
0 0 49 3 3 #"MT)"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 1 #"\""
0 0 49 3 4 #"Test"
0 0 49 3 1 #" "
0 0 49 3 7 #"failed."
0 0 49 3 1 #" "
0 0 49 3 8 #"Function"
0 0 49 3 1 #" "
0 0 49 3 6 #"should"
0 0 49 3 1 #" "
0 0 49 3 6 #"return"
0 0 49 3 1 #" "
0 0 49 3 5 #"image"
0 0 49 3 1 #" "
0 0 49 3 2 #"of"
0 0 49 3 1 #" "
0 0 49 3 5 #"empty"
0 0 49 3 1 #" "
0 0 49 3 5 #"scene"
0 0 49 3 1 #" "
0 0 49 3 4 #"with"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 32 #"toolbar and rectangle selected\")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 12 #"check-equal?"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"draw-world "
0 0 49 3 1 #"("
0 0 49 3 11 #"make-world "
0 0 49 3 1 #"'"
0 0 49 3 1 #"("
0 0 49 3 2 #") "
0 0 49 3 4 #"cir "
0 0 49 3 8 #"#false))"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 1 #"("
0 0 49 3 13 #"overlay/align"
0 0 49 3 1 #" "
0 0 49 3 7 #"\"left\" "
0 0 49 3 6 #"\"top\" "
0 0 49 29 1 #"\n"
0 0 49 3 31 #"                               "
0 0 49 3 1 #"("
0 0 49 3 5 #"above"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"BLACK-P "
0 0 49 3 13 #"WHITE-SQUARE)"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"                                      "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"BLACK-R "
0 0 49 3 13 #"WHITE-SQUARE)"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"                                      "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"WHITE-C "
0 0 49 3 14 #"BLACK-SQUARE))"
0 0 49 29 1 #"\n"
0 0 49 3 31 #"                               "
0 0 49 3 3 #"MT)"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 1 #"\""
0 0 49 3 4 #"Test"
0 0 49 3 1 #" "
0 0 49 3 7 #"failed."
0 0 49 3 1 #" "
0 0 49 3 8 #"Function"
0 0 49 3 1 #" "
0 0 49 3 6 #"should"
0 0 49 3 1 #" "
0 0 49 3 6 #"return"
0 0 49 3 1 #" "
0 0 49 3 5 #"image"
0 0 49 3 1 #" "
0 0 49 3 2 #"of"
0 0 49 3 1 #" "
0 0 49 3 5 #"empty"
0 0 49 3 1 #" "
0 0 49 3 5 #"scene"
0 0 49 3 1 #" "
0 0 49 3 4 #"with"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 30 #"toolbar and circle selected\"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 11 #"draw-world "
0 0 49 3 1 #"w"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 13 #"overlay/align"
0 0 49 3 1 #" "
0 0 49 3 7 #"\"left\" "
0 0 49 3 5 #"\"top\""
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                 "
0 0 49 3 1 #"("
0 0 49 3 13 #"draw-toolbar "
0 0 49 3 2 #"w)"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                 "
0 0 49 3 1 #"("
0 0 49 3 16 #"draw-all-shapes "
0 0 49 3 4 #"w)))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 30 #"; draw-toolbar: World -> Image"
0 0 49 29 1 #"\n"
0 0 49 3 68
#"; Draws different toolbar states based on the current world's state."
0 0 49 29 1 #"\n"
0 0 49 3 43 #"; Strategy: Data decomposition on w : World"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 14 #"begin-for-test"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"("
0 0 49 3 12 #"check-equal?"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 13 #"draw-toolbar "
0 0 49 3 14 #"INITIAL-WORLD)"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 49 3 1 #"("
0 0 49 3 5 #"above"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"WHITE-P "
0 0 49 3 13 #"BLACK-SQUARE)"
0 0 49 29 1 #"\n"
0 0 49 3 23 #"                       "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"BLACK-R "
0 0 49 3 13 #"WHITE-SQUARE)"
0 0 49 29 1 #"\n"
0 0 49 3 23 #"                       "
0 0 49 3 1 #"("
0 0 49 3 7 #"overlay"
0 0 49 3 1 #" "
0 0 49 3 8 #"BLACK-C "
0 0 49 3 16 #"WHITE-SQUARE))))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 1 #"("
0 0 49 3 13 #"draw-toolbar "
0 0 49 3 1 #"w"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"