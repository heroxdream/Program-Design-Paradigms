;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname test) (read-case-sensitive #t) (teachpacks ((lib "arrow-gui.rkt" "teachpack" "htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "arrow-gui.rkt" "teachpack" "htdp")))))
(require 2htdp/image)
(list "a" "b" "c" "d")
(define MT (empty-scene 100 60))



;(map )
;(define (render lst)
;  (folder (lambda (str img) (place-))
;          MT
;          lst))


(define ecli (list
              (line 0 0 "white") 
              (text "pai" 12 "black")
              (text "xua" 12 "black")))

(define lst (cons "left" ecli))



(image-height (apply above/align lst))

(overlay/align "left" "top" (apply above/align lst) MT)

; List -> List
(define (truncated-lst lst)
  (local (
          (define param-lst (append (list "left" 
                                          (line 0 0 "white"))
                                    lst))
          (define (truncate lst)
            (if (<= (image-height (apply above/align lst)) 61)
                lst
                (truncate (remove-last lst)))))
    (truncate param-lst)))
    

(define (remove-last lst)
  (reverse (rest (reverse lst))))

(define (num->image n)
  (text (number->string n) 12 "black"))


(define users (build-list  25 num->image ))

(truncated-lst users)


(overlay/align "left" "top" 
               (apply above/align (truncated-lst users))
               MT)


(define (text-color symbol)
  (if (or (eq? symbol 'broadcast) (eq? symbol 'userlist))
      "black"
      (if (eq? symbol 'private)
          "blue"
          (if (eq? symbol 'error)
              "red"
              "gray"))))




(define-struct event [msg type])
(define line-width 100)

(define (string->img s)
  (text s 12 "black"))



(define s1 "1234567")
(substring s1 (string-length s1))

(define (find-pos-in-pre pre width)
  (local (
          (define (find-pos-in-pre/a pre width a)
            (if 
                (or (= a 0)
                    (> (image-width (string->img (substring pre (sub1 a))))
                       width))
                a
                (find-pos-in-pre/a pre width (sub1 a)))))
    (find-pos-in-pre/a pre width (string-length pre))))


(find-pos-in-pre s1 30)

(image-width (string->img (substring s1 3)))

